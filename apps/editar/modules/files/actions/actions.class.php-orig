<?php

/**
 * files actions.
 *
 * @package    fin
 * @subpackage files
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 2692 2006-11-15 21:03:55Z fabien $
 */
class filesActions extends sfActions
{
  /**
   * Executes index action
   *
   */
  public function executeIndex()
  {
    $this->redirect('serials/index');
  }

  /**
   * Executes component AJAX
   *
   */
  public function executeList()
  {
    return $this->renderComponent('files', 'list');
  }


  /**
   * Executes other actions
   *
   */
  public function executeCreate()
  {
    $this->file = new File();

    $this->file->setMmId($this->getRequestParameter('mm'));
    $this->file->setLanguageId(LanguagePeer::getDefaultSelId());
    $this->file->setFormatId(FormatPeer::getDefaultSelId());
    $this->file->setCodecId(CodecPeer::getDefaultSelId());
    $this->file->setMimeTypeId(MimeTypePeer::getDefaultSelId());
    $this->file->setPerfilId(1);
    $this->file->setResolutionId(ResolutionPeer::getDefaultSelId());
    $this->file->setUrl(sfConfig::get('app_videoserver_url','mms://videoserver.uvigo.es/...'));
    
    $this->langs = sfConfig::get('app_lang_array', array('es'));

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->file);
    $this->langs = sfConfig::get('app_lang_array', array('es'));
  }

  

  public function executeDelete()
  {
    $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($file);
    $file->delete();
    
    return $this->renderComponent('files', 'list');
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $file = new File();
    }
    else
    {
      $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($file);
    }


    $file->setMmId($this->getRequestParameter('mm', 0));
    $file->setLanguageId($this->getRequestParameter('language_id', 0));
    $file->setUrl($this->getRequestParameter('url', 0));
    $file->setFile($this->getRequestParameter('file', 0));
    $file->setFormatId($this->getRequestParameter('format_id', 0));
    $file->setCodecId($this->getRequestParameter('codec_id', 0));
    $file->setMimeTypeId($this->getRequestParameter('mime_type_id', 0));
    $file->setPerfilId($this->getRequestParameter('perfil_id', 1));
    $file->setResolutionId($this->getRequestParameter('resolution_id', 0));
    $file->setBitrate($this->getRequestParameter('bitrate', 0));
    $file->setFramerate($this->getRequestParameter('framerate', 0));
    $file->setChannels($this->getRequestParameter('channels', 0));
    $file->setAudio($this->getRequestParameter('audio', 0));
    $file->setDuration($this->getRequestParameter('duration_min', 0) * 60 + $this->getRequestParameter('duration_seg', 0));
    $file->setSize($this->getRequestParameter('size', 0));
    //iniSort
    //num_view
    //tamano

    $langs = sfConfig::get('app_lang_array', array('es'));
    foreach($langs as $lang){
      $file->setCulture($lang);
      $file->setDescription($this->getRequestParameter('description_' . $lang, ' '));
    }
    
    $file->save();

    return $this->renderComponent('files', 'list'); 
  }

  public function executeAutocomplete(){
  
    $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    if ($file == null) return $this->renderText('K0');

    $file->setDuration(intval(FilePeer::getDuration($file->getUrlMount())));
    $file->setSize(filesize($file->getUrlMount()));
    $file->save();

    return $this->renderComponent('files', 'list');
  }


  public function executeInfo(){
    $this->file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->file);
  }

  public function executeDownload(){
    $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($file);

    // Cabeceras HTTP
    header('HTTP/1.1 200 OK');
    header ('Content-Disposition: attachment; filename='.basename($file->getUrl())."\n\n"); 
    if ($file->getSize() != 0) header('Content-Length: '.$file->getSize());
    header('Content-type: application/octet-stream');


    //DATOS
    readfile($file->getUrlMount());
    
    return sfView::NONE;
  }


  public function executePic(){
  
    $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    if ($file == null) return $this->renderText('K0');

    $num = count($file->getMm()->getPics());

    //$file->createPic($this->getRequestParameter('numframe', 125 * ($num +1)));
    $file->createPic(125 * ($num +1));
    return $this->renderComponent('pics', 'list');
  }
  

  /**
   * Executes order actions
   *
   */
  public function executeUp()
  {
    $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($file);

    $file->moveUp();
    $file->save();

    return $this->renderComponent('files', 'list');
  }

  public function executeDown()
  {
    $file = FilePeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($file);

    $file->moveDown();
    $file->save();

    return $this->renderComponent('files', 'list');
  }






  /**
   * Executes webservices
   *
   */

  /**
   *  ERRORES:
   *    1: No existe Objeto multimedia
   *    2: No existe Perfil 
   *    3: Tamano erroneo  
   *    4: Duracion erroneo
   *    5: Url erronea
   *    6: No existe Idioma
   *    7: Error en el ticket
   *    8: No existe tarea transcodificando
   *    9: Estado no valido
   *
   *
   */
  public function executePretranscod()
  {
    //auth
    if ($this->getRequestParameter('token') != 'adsfuyhuewgfrtuasld783214r5tsagefqetwr4q65ghdasjkfg4') {
      echo "KO:7";
      return sfView::NONE;
    }

    //estado
    $state = $this->getRequestParameter('estado');
    if (!in_array($state, array(1,2))){
      echo "KO:9";
      return sfView::NONE;
    }

    //perfil
    $profile = ProfilePeer::retrieveByPk($this->getRequestParameter('profile'));
    if ($profile == null) {
      echo "KO:2";
      return sfView::NONE;
    }

    //lang
    $language = LanguagePeer::retrieveByPk($this->getRequestParameter('lang'));
    if ($language == null) {
      echo "KO:6";
      return sfView::NONE;
    }

    //mm
    $mm = MmPeer::retrieveByPk($this->getRequestParameter('mm'));
    if ($mm == null) {
      echo "KO:1";
      $this->logMessage('TR: ERROR KO:1 ' .$this->getRequestParameter('mm')  , 'err');
      return sfView::NONE;
    }

    //if($mm->getSerialId() != 313){ //Serie de prueba
    //  echo "KO:15";
    //  return sfView::NONE;
    //}


    $url = $this->getRequestParameter('url');

    $tr = new Transcoding();
    $tr->setMm($mm);
    $tr->setLanguage($language);
    $tr->setUrl($url);
    $tr->setStatusId($state);
    $tr->save();

    if($state == 2){
      $this->logMessage('TR('.$tr->getId().'): Entra en el transcodificador', 'notice');
    }else{
      $this->logMessage('TR('.$tr->getId().'): Entra en la cola', 'notice');
    }

    echo "OK:".$tr->getId();
    return sfView::NONE;
  }

  /***
   *
   *
   *
   */
  public function executeStarttranscod()
  {
    //auth
    if ($this->getRequestParameter('token') != 'adsfuyhuewgfrtuasld783214r5tsagefqetwr4q65ghdasjkfg4') {
      echo "KO:7";
      $this->logMessage('TR: ENTRA KO:7', 'err');
      return sfView::NONE;
    }

    //transcoding
    $tr = TranscodingPeer::retrieveByPk($this->getRequestParameter('transcoding'));
    if ($tr == null) {
      echo "KO:8";// - No existe Perfil 
      $this->logMessage('TR: ENTRA KO:8', 'err');
      return sfView::NONE;
    }
        
    $tr->setStatusId(2);
    $tr->save();

    $this->logMessage('TR('.$this->getRequestParameter('transcoding').'): Entra en el transcodificador', 'notice');

    echo "OK:".$tr->getId();
    return sfView::NONE;
  }


  /***
   *
   *
   *
   */
  public function executeStoptranscod()
  {
    //auth
    if ($this->getRequestParameter('token') != 'adsfuyhuewgfrtuasld783214r5tsagefqetwr4q65ghdasjkfg4') {
      echo "KO:7";
      return sfView::NONE;
    }


    //transcoding
    $tr = TranscodingPeer::retrieveByPk($this->getRequestParameter('transcoding'));
    if ($tr == null) {
      $this->logMessage('TR('.$this->getRequestParameter('transcoding').'): ERROR KO:8', 'err');
      echo "KO:8";// - No existe Perfil 
      return sfView::NONE;
    }
    
    
    $tr->delete();

    $this->logMessage('TR('.$this->getRequestParameter('transcoding').'): Error al transcodificar se borra', 'notice');

    echo "OK:".$tr->getId();
    return sfView::NONE;
  }


  /***
   *
   *
   *
   */
  public function executePosttranscod()
  {
    //auth
    if ($this->getRequestParameter('token') != 'adsfuyhuewgfrtuasld783214r5tsagefqetwr4q65ghdasjkfg4') {
      echo "KO:7";// - Error TICKET
      return sfView::NONE;
    }

    //mm
    $mm = MmPeer::retrieveByPk($this->getRequestParameter('mm'));
    if ($mm == null) {
      echo "KO:1";// - No existe Objeto Multimedia
      $this->logMessage('TR: ERROR KO:1 ' .$this->getRequestParameter('mm')  , 'err');
      return sfView::NONE;
    }
    
    //perfil
    $profile = ProfilePeer::retrieveByPk($this->getRequestParameter('profile'));
    if ($profile == null) {
      echo "KO:2";// - No existe Perfil 
      return sfView::NONE;
    }

    //transcoding
    $transcoding = TranscodingPeer::retrieveByPk($this->getRequestParameter('transcoding'));
    if ($transcoding == null) {
      echo "KO:8";// - No existe Perfil 
      return sfView::NONE;
    }

    //lang
    $language = LanguagePeer::retrieveByPk($this->getRequestParameter('lang'));
    if ($language == null) {
      echo "KO:6";// - No existe Idioma 
      return sfView::NONE;
    }

    //size
    $size = intval($this->getRequestParameter('size'));
    if ($size <= 0) {
      echo "KO:3";// - Tamano erroneo 
      return sfView::NONE;
    }

    //duration
    $duration = intval($this->getRequestParameter('duration'));
    if ($duration <= 0) {
      echo "KO:4"; // - Duracion erroneo
      return sfView::NONE;
    }
    
    $url = $this->getRequestParameter('url');
    if(!file_exists(sfConfig::get('app_videoserv_dir').$url)){ //ver que extension es correnta si es diferente de ??
      echo "KO:5";// - Url erronea
      $this->logMessage('TR('.$this->getRequestParameter('transcoding').'): ERROR KO:5'.sfConfig::get('app_videoserv_dir').$url , 'err');
      return sfView::NONE;
    }


    //if($mm->getSerialId() != 313){ //Serie de prueba
    //  echo "KO:15";
    //  return sfView::NONE;
    //}


    //
    $transcoding->delete(); //echo mas abajo

    //
    $file = new File();
    
    $file->setMmId($mm->getId());  //mm temporal FALTA
    $file->setLanguage($language);
    $file->setUrl(sfConfig::get('app_videoserv_host').$url);

    //OJO AL CREAR NUEVOS PERFILES.
    switch($profile->getId()){
    case 1:
      $file->setFormatId(1);
      $file->setCodecId(6);
      $file->setMimeTypeId(2);
      $file->setResolutionId(3);
      break;
    case 2:
      $file->setFormatId(5);
      $file->setCodecId(7);
      $file->setMimeTypeId(2);
      $file->setResolutionId(6); 
      break;
    case 3:
      $file->setFormatId(2);
      $file->setCodecId(8);
      $file->setMimeTypeId(2);
      $file->setResolutionId(7);
      break;
    case 4:
      $file->setFormatId(2);
      $file->setCodecId(6);
      $file->setMimeTypeId(2);
      $file->setResolutionId(7); 
      break;
    case 5:
      $file->setFormatId(2);
      $file->setCodecId(6);
      $file->setMimeTypeId(2);
      $file->setResolutionId(3); 
      break;
    case 6:
      $file->setFormatId(1);
      $file->setCodecId(4);
      $file->setMimeTypeId(1);
      $file->setResolutionId(3); 
      break;
    case 7:
      $file->setFormatId(1);
      $file->setCodecId(4);
      $file->setMimeTypeId(1);
      $file->setResolutionId(6); 
      break;
    case 8:
      $file->setFormatId(2);
      $file->setCodecId(6);
      $file->setMimeTypeId(2);
      $file->setResolutionId(6);
      break;
    default:
      $file->setFormatId(FormatPeer::getDefaultSelId());
      $file->setCodecId(CodecPeer::getDefaultSelId());
      $file->setMimeTypeId(MimeTypePeer::getDefaultSelId());
      $file->setResolutionId(ResolutionPeer::getDefaultSelId());
    }
    
    $file->setBitrate($profile->getBitrate());
    $file->setFramerate($profile->getFramerate());
    $file->setChannels($profile->getChannels());
    $file->setAudio($profile->getAudio());
    $file->setDuration($duration);
    $file->setSize($size);

    $langs = sfConfig::get('app_lang_array', array('es'));
    foreach($langs as $lang){
      $file->setCulture($lang);
      $file->setDescription(' ');
    }
    
    $file->save();    


    $this->logMessage('TR('.$this->getRequestParameter('transcoding').'): Creado file: '.$file->getId().', y de url:'.$file->getUrl(), 'notice');


    //id de file in prgres por ahora me da igual
    echo "OK:".$file->getId();
    return sfView::NONE;
  }


  protected function sanitizeDir($dir)
  {
    return preg_replace('/[^a-z0-9_-]/i', '_', $dir);
  }

  protected function sanitizeFile($file)
  {
    return preg_replace('/[^a-z0-9_\.-]/i', '_', $file);
  }
}
